diff --git a/.gitconfig b/.gitconfig
--- ./.gitconfig
+++ ./.gitconfig
@@ -4,5 +4,5 @@
 [push]
     remote = origin
 [gsync]
-    remote = origin
-    target = origin/dev
+    remote = BareReps
+    target = BareReps/hashSizeKey
diff --git a/main.go b/main.go
--- ./main.go
+++ ./main.go
@@ -55,13 +55,10 @@ func main() {
 	// 新增逻辑：处理 fav.log 文件，类似于 find_sort_similar_filenames 函数的操作
 	favLogPath := filepath.Join(rootDir, "fav.log") // 假设 fav.log 在 rootDir 目录下
 	// 重新初始化工作池和等待组，用于第二批任务
-	taskQueue, poolWg = NewWorkerPool(workerCount)
 	processFavLog(favLogPath, rootDir, rdb, ctx, taskQueue, poolWg)
-	close(taskQueue)
-	poolWg.Wait()
 }
 
-func processFavLog(filePath string, rootDir string, rdb *redis.Client, ctx context.Context, taskQueue chan<- Task, poolWg *sync.WaitGroup) {
+func processFavLog(filePath string, rootDir string, rdb *redis.Client, ctx context.Context) {
 	file, err := os.Open(filePath)
 	if err != nil {
 		fmt.Println("Error opening file:", err)
@@ -74,18 +71,23 @@ func processFavLog(filePath string, rootDir string, rdb *redis.Client, ctx conte
 	for scanner.Scan() {
 		line := scanner.Text()
 		line = regexp.MustCompile(`^\d+,`).ReplaceAllString(line, "")
-		filePaths = append(filePaths, line)
+		filePaths = append(filePaths, line) // 添加文件路径
 		fileNames = append(fileNames, extractFileName(line))
 	}
 
+	// 确定工作池的大小并调用 extractKeywords
 	keywords := extractKeywords(fileNames)
+
 	closeFiles := findCloseFiles(fileNames, filePaths, keywords)
 
+	// 排序关键词
 	sort.Slice(keywords, func(i, j int) bool {
 		return len(closeFiles[keywords[i]]) > len(closeFiles[keywords[j]])
 	})
 
 	totalKeywords := len(keywords)
+	workerCount := 100
+	taskQueue, poolWg = NewWorkerPool(workerCount)
 	for i, keyword := range keywords {
 		keywordFiles := closeFiles[keyword]
 		if len(keywordFiles) >= 2 {
@@ -98,6 +100,8 @@ func processFavLog(filePath string, rootDir string, rdb *redis.Client, ctx conte
 			}(keyword, keywordFiles, i) // 立即传递当前迭代的变量
 		}
 	}
+	close(taskQueue)
+	poolWg.Wait()
 }
 
 // 初始化Redis客户端
diff --git a/utils.go b/utils.go
--- ./utils.go
+++ ./utils.go
@@ -16,6 +16,7 @@ import (
 	"sort"
 	"strconv"
 	"strings"
+	"sync"
 )
 
 func loadExcludePatterns(filename string) ([]string, error) {
@@ -194,37 +195,45 @@ func extractFileName(filePath string) string {
 	return strings.ToLower(filepath.Base(filePath))
 }
 
-// extractKeywords extracts keywords from a slice of file names.
+var pattern = regexp.MustCompile(`\b(?:\d{2}\.\d{2}\.\d{2}|(?:\d+|[a-z]+(?:\d+[a-z]*)?))\b`)
+
 func extractKeywords(fileNames []string) []string {
-	keywords := make(map[string]struct{})
-	pattern := regexp.MustCompile(`\b(?:\d{2}\.\d{2}\.\d{2}|(?:\d+|[a-z]+(?:\d+[a-z]*)?))\b`)
+	workerCount := 100
+	// 创建自己的工作池
+	taskQueue, poolWg := NewWorkerPool(workerCount)
+	defer close(taskQueue)
+
+	keywordsCh := make(chan string, len(fileNames)*10) // 假设每个文件名大约有10个关键词
 
 	for _, fileName := range fileNames {
-		nameWithoutExt := strings.TrimSuffix(fileName, filepath.Ext(fileName))
+		taskQueue <- func(name string) Task {
+			return func() {
+				nameWithoutExt := strings.TrimSuffix(name, filepath.Ext(name))
 				matches := pattern.FindAllString(nameWithoutExt, -1)
 				for _, match := range matches {
-			keywords[match] = struct{}{}
+					keywordsCh <- match
 				}
 			}
-
-	var keywordList []string
-	for keyword := range keywords {
-		keywordList = append(keywordList, keyword)
+		}(fileName)
 	}
 
-	return keywordList
-}
+	// 关闭通道的逻辑保持不变
+	go func() {
+		poolWg.Wait()
+		close(keywordsCh)
+	}()
 
-func findCloseFiles(fileNames, filePaths, keywords []string) map[string][]string {
-	closeFiles := make(map[string][]string)
-
-	for _, kw := range keywords {
-		for i, fileName := range fileNames {
-			if strings.Contains(strings.ToLower(fileName), strings.ToLower(kw)) {
-				closeFiles[kw] = append(closeFiles[kw], filePaths[i])
-			}
+	// 收集关键词
+	keywordsMap := make(map[string]struct{})
+	for keyword := range keywordsCh {
+		keywordsMap[keyword] = struct{}{}
 	}
+
+	// 将map转换为slice
+	var keywords []string
+	for keyword := range keywordsMap {
+		keywords = append(keywords, keyword)
 	}
 
-	return closeFiles
+	return keywords
 }
