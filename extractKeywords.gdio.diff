diff --git a/.gitconfig b/.gitconfig
--- ./.gitconfig
+++ ./.gitconfig
@@ -4,5 +4,5 @@
 [push]
     remote = origin
 [gsync]
-    remote = origin
-    target = origin/dev
+    remote = BareReps
+    target = BareReps/hashSizeKey
diff --git a/main.go b/main.go
--- ./main.go
+++ ./main.go
@@ -74,13 +74,26 @@ func processFavLog(filePath string, rootDir string, rdb *redis.Client, ctx conte
 	for scanner.Scan() {
 		line := scanner.Text()
 		line = regexp.MustCompile(`^\d+,`).ReplaceAllString(line, "")
-		filePaths = append(filePaths, line)
+		filePaths = append(filePaths, line) // 添加文件路径
 		fileNames = append(fileNames, extractFileName(line))
 	}
 
-	keywords := extractKeywords(fileNames)
+	// 调用修改过的 extractKeywords 函数
+	keywordsCh := extractKeywords(fileNames, taskQueue, poolWg)
+
+	// 收集异步返回的关键词
+	keywordsMap := make(map[string]struct{})
+	for keyword := range keywordsCh {
+		keywordsMap[keyword] = struct{}{}
+	}
+	var keywords []string
+	for keyword := range keywordsMap {
+		keywords = append(keywords, keyword)
+	}
+
 	closeFiles := findCloseFiles(fileNames, filePaths, keywords)
 
+	// 排序关键词
 	sort.Slice(keywords, func(i, j int) bool {
 		return len(closeFiles[keywords[i]]) > len(closeFiles[keywords[j]])
 	})
diff --git a/utils.go b/utils.go
--- ./utils.go
+++ ./utils.go
@@ -16,6 +16,7 @@ import (
 	"sort"
 	"strconv"
 	"strings"
+	"sync"
 )
 
 func loadExcludePatterns(filename string) ([]string, error) {
@@ -194,25 +195,30 @@ func extractFileName(filePath string) string {
 	return strings.ToLower(filepath.Base(filePath))
 }
 
-// extractKeywords extracts keywords from a slice of file names.
-func extractKeywords(fileNames []string) []string {
-	keywords := make(map[string]struct{})
-	pattern := regexp.MustCompile(`\b(?:\d{2}\.\d{2}\.\d{2}|(?:\d+|[a-z]+(?:\d+[a-z]*)?))\b`)
+var pattern = regexp.MustCompile(`\b(?:\d{2}\.\d{2}\.\d{2}|(?:\d+|[a-z]+(?:\d+[a-z]*)?))\b`)
 
+// extractKeywords 使用工作池从文件名中提取关键词
+func extractKeywords(fileNames []string, taskQueue chan<- Task, poolWg *sync.WaitGroup) <-chan string {
+	keywordsCh := make(chan string, len(fileNames)*10) // 假设每个文件名大约有10个关键词
 	for _, fileName := range fileNames {
-		nameWithoutExt := strings.TrimSuffix(fileName, filepath.Ext(fileName))
+		taskQueue <- func(name string) Task {
+			return func() {
+				nameWithoutExt := strings.TrimSuffix(name, filepath.Ext(name))
 				matches := pattern.FindAllString(nameWithoutExt, -1)
 				for _, match := range matches {
-			keywords[match] = struct{}{}
+					keywordsCh <- match
 				}
 			}
-
-	var keywordList []string
-	for keyword := range keywords {
-		keywordList = append(keywordList, keyword)
+		}(fileName)
 	}
 
-	return keywordList
+	// 一个新的 Goroutine 等待所有任务完成后关闭关键词通道
+	go func() {
+		poolWg.Wait()
+		close(keywordsCh)
+	}()
+
+	return keywordsCh
 }
 
 func findCloseFiles(fileNames, filePaths, keywords []string) map[string][]string {
